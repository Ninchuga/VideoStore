# ASP.NET
# Build and test ASP.NET projects.
# Add steps that publish symbols, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/aspnet/build-aspnet-4

trigger:
- main

pool:
  vmImage: 'windows-latest'
  #vmImage: ubuntu-latest

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  dotNetFramework: 'net7.0'
  dotNetVersion: '7.0.x'
  targetRuntime: 'linux-x64'
  dockerRegistryServiceConnection: 'videostoreregistry' # using service principal created for docker registry
  identityServiceImageRepository: 'identity'
  identityServiceDockerfilePath: '$(Build.SourcesDirectory)/src/services/identity/VideoStore.IdentityService/Dockerfile'
  tag: '$(Build.BuildId)'

steps:
- task: UseDotNet@2
  displayName: 'Use .NET 7 sdk'
  inputs:
    packageType: 'sdk'
    version: '7.x'
    includePreviewVersions: true
    
- task: DotNetCoreCLI@2
  displayName: Runt tests
  inputs:
   command: test
   projects: '**/Tests/*.csproj'
   arguments: '--configuration $(buildConfiguration)'

# - script: dotnet build --configuration $(buildConfiguration)
#   displayName: 'dotnet build $(buildConfiguration)'
- task: DotNetCoreCLI@2
  displayName: Build solution
  inputs:
   command: 'build'
   projects: '**/*.sln'
   arguments: '--configuration $(buildConfiguration)'

# - task: DotNetCoreCLI@2
#   displayName: 'Publish artifacts'
#   inputs:
#     command: publish
#     publishWebProjects: true
#     #projects: 'src/services/*/*/*.csproj'
#     arguments: '--configuration $(BuildConfiguration) --framework $(dotNetFramework) --output $(Build.ArtifactStagingDirectory)'
#     zipAfterPublish: true

# Publish it as .NET 6 self-contained application for linux runtime
- task: DotNetCoreCLI@2
  inputs:
    command: publish
    publishWebProjects: True
    arguments: '--configuration $(BuildConfiguration) --framework $(dotNetFramework) --output $(Build.ArtifactStagingDirectory)'
    zipAfterPublish: True
  
# Package the file and uploads them as an artifact of the build -> new way
- task: PublishPipelineArtifact@1
  inputs:
   targetPath: '$(Build.ArtifactStagingDirectory)'
   artifact: 'VideoStoreArtifact'
   publishLocation: 'pipeline'

# - task: Docker@2
#   inputs:
#     containerRegistry: $(dockerRegistryServiceConnection)
#     repository: $(identityServiceImageRepository)
#     command: 'buildAndPush'
#     Dockerfile: $(identityServiceDockerfilePath)
#     buildContext: '$(Build.SourcesDirectory)/src'
#     tags: |
#           $(tag)